# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Category {
  id: Int!
  name: String!
  posts: [Post!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Post {
  id: Int!
  title: String!
  content: String!
  readCount: Int!
  clapCount: Int!
  authorId: Int!
  author: User!
  comments: [Comment!]!
  categories: [Category!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Comment {
  id: Int!
  content: String!
  userId: Int!
  postId: Int!
  user: User!
  post: Post!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type User {
  id: ID!
  username: String!
  name: String!
  bio: String
  createdAt: DateTime!
  updatedAt: DateTime!
  posts: [Post!]
  comments: [Comment!]
}

type Token {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
}

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

type Auth {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
  user: User!
}

type Query {
  users(take: Float! = 10, skip: Float! = 0, sortDirection: SortDirection! = DESC, sortColumn: String! = "id", filter: UserFilterArgs): [User!]!
  user(id: Int!): User!
  posts(take: Float! = 10, skip: Float! = 0, sortDirection: SortDirection! = DESC, sortColumn: PostSortColumn! = ID, filter: PostFilterArgs): [Post!]!
  post(id: Int!): Post!
  categories(take: Float! = 10, skip: Float! = 0, sortDirection: SortDirection! = DESC, sortColumn: String! = "id", filter: CategoryFilterArgs): [Category!]!
  category(id: Int!): Category!
  comments(take: Float! = 10, skip: Float! = 0, sortDirection: SortDirection! = DESC, sortColumn: String! = "id", filter: CommentFilterArgs): [Comment!]!
  comment(id: Int!): Comment!
}

enum SortDirection {
  ASC
  DESC
}

input UserFilterArgs {
  query: String
}

enum PostSortColumn {
  ID
  TITLE
  CLAPCOUNT
  READCOUNT
}

input PostFilterArgs {
  query: String
  authorId: Int
}

input CategoryFilterArgs {
  query: String
}

input CommentFilterArgs {
  postId: Int!
}

type Mutation {
  updateUser(updateUserInput: UpdateUserInput!): User!
  signup(signUpInput: SignUpInput!): Auth!
  signIn(signInInput: SignInInput!): Auth!
  refreshToken(token: JWT!): Token!
  createPost(createPostInput: CreatePostInput!): Post!
  clap(id: Int!): Post!
  updatePost(updatePostInput: UpdatePostInput!): Post!
  removePost(id: Int!): Post!
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
  updateCategory(updateCategoryInput: UpdateCategoryInput!): Category!
  removeCategory(id: Int!): Category!
  createComment(createCommentInput: CreateCommentInput!): Comment!
  updateComment(updateCommentInput: UpdateCommentInput!): Comment!
  removeComment(id: Int!): Comment!
}

input UpdateUserInput {
  username: String
  name: String
  password: String
  id: Int!
}

input SignUpInput {
  username: String
  password: String
  name: String!
  bio: String
}

input SignInInput {
  username: String!
  password: String!
}

input CreatePostInput {
  title: String!
  content: String!
  categoryIds: [Int!]!
}

input UpdatePostInput {
  title: String
  content: String
  categoryIds: [Int!]
  id: Int!
}

input CreateCategoryInput {
  name: String!
}

input UpdateCategoryInput {
  name: String
  id: Int!
}

input CreateCommentInput {
  postId: Int!
  content: String!
}

input UpdateCommentInput {
  postId: Int
  content: String
  id: Int!
}